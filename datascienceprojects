Project #1: Python Syntax: Medical Insurance Project
script.py
# create the initial variables below
age = 28
smoker = 0
sex = 1
bmi = 26.2
num_of_children = 3

# Add insurance estimate formula below
insurance_cost = 250 * age - 128 * sex + 370 * bmi + 425 * num_of_children + 24000 * smoker - 12500
print("This person's insurance cost is " + str(insurance_cost) + " dollars.")
# Age Factor
x = 4
x += 2
new_insurance_cost = 250 * age - 128 * sex + 370 * bmi + 425 * num_of_children + 24000 * smoker - 12500
print("The change in estimated insurance cost after increasing the age by 4 years is " + str(change_in_insurance_cost) + " dollars")
# BMI Factor
age = 28
bmi = 26.2

# Male vs. Female Factor


# Extra Practice

Project #2: Python Functions: Medical Insurance Peoject
script.py
# Create calculate_insurance_cost() function below: 
def calculate_insurance_cost(name, age, sex, bmi, num_of_children, smoker):
  estimated_cost = 50*age - 128*sex + 370*bmi + 425*num_of_children + 24000*smoker - 12500
  print("The estimated insurance cost for this person is " +
  str(estimated_cost) + " dollars.")
  return estimated_cost

# Initial variables for Maria 
age = 28
sex = 0  
bmi = 26.2
num_of_children = 3
smoker = 0  

# Estimate Maria's insurance cost
maria_insurance_cost = calculate_insurance_cost(name = "Maria", age = 28, sex = 0, bmi = 26.2, num_of_children = 3, smoker = 0)

print("The estimated insurance cost for Maria is " + str(insurance_cost) + " dollars.")

# Initial variables for Omar


# Estimate Omar's insurance cost 
omar_insurance_cost = calculate_insurance_cost(name = "Omar", age = 35, sex = 1, bmi = 22.2, num_of_children = 0, smoker = 1)

Project #3: Python Control Flow: Medical Insurance Project
script.py
# Add your code here
def analyze_smoker(smoker_status):
if smoker_status == 1:
    print("To lower your cost, you should consider quitting smoking.")
  else:
    print("Smoking is not an issue for you.")
# Function to estimate insurance cost:
def estimate_insurance_cost(name, age, sex, bmi, num_of_children, smoker):
  estimated_cost = 250*age - 128*sex + 370*bmi + 425*num_of_children + 24000*smoker - 12500
  print(name + "'s Estimated Insurance Cost: " + str(estimated_cost) + " dollars.")
  analyze_smoker(smoker)
  analyze_bmi(bmi)
  return estimated_cost
 def analyze_bmi(bmi_value):
if bmi_value > 30:
    print("Your BMI is in the obese range. To lower your cost, you should significantly lower your BMI.")
  elif bmi_value >= 25 and bmi_value <= 30:
    print("Your BMI is in the overweight range. To lower your cost, you should lower your BMI.")
  elif bmi_value >= 18.5 and bmi_value < 25:
    print("Your BMI is in a healthy range.")
  else:
    print("Your BMI is in the underweight range. Increasing your BMI will not help lower your cost, but it will help improve your health.")
# Estimate Keanu's insurance cost
keanu_insurance_cost = estimate_insurance_cost(name = 'Keanu', age = 31, sex = 1, bmi = 26.4, num_of_children = 4, smoker = 0)

Project #4: Python Lists: Medical Insurance Project
script.py
# Function to estimate insurance cost:
def estimate_insurance_cost(name, age, sex, bmi, num_of_children, smoker):
  estimated_cost = 250*age - 128*sex + 370*bmi + 425*num_of_children + 24000*smoker - 12500
  print(name + "'s Estimated Insurance Cost: " + str(estimated_cost) + " dollars.")
  return estimated_cost

# Estimate Maria's insurance cost
maria_insurance_cost = estimate_insurance_cost(name = "Maria", age = 31, sex = 0, bmi = 23.1, num_of_children = 1, smoker = 0)

# Estimate Rohan's insurance cost
rohan_insurance_cost = estimate_insurance_cost(name = 
"Rohan", age = 25, sex = 1, bmi = 28.5, num_of_children = 3, smoker = 0)

# Estimate Valentina's insurance cost
valentina_insurance_cost = estimate_insurance_cost(name = "Valentina", age = 53, sex = 0, bmi = 31.4, num_of_children = 0, smoker = 1)

# Add your code here
names = ["Maria", "Rohan", "Valentina"]
insurance_costs = [4150.0, 5320.0, 35210.0]
insurance_data = list(zip(names, insurance_costs))
estimated_insurance_data = []
estimated_insurance_data.append(("Maria", maria_insurance_cost))
estimated_insurance_data.append(("Rohan", rohan_insurance_cost))
estimated_insurance_data.append(("Valentina", valentina_insurance_cost))
print("Here is the estimated insurance cost data: " + str(estimated_insurance_data))
print("Here is the actual insurance cost data: " + str(insurance_data))

Project #5: Working with Python Lists: Medical Insurance Project
script.py
names = ["Mohamed", "Sara", "Xia", "Paul", "Valentina", "Jide", "Aaron", "Emily", "Nikita", "Paul"]
insurance_costs = [13262.0, 4816.0, 6839.0, 5054.0, 14724.0, 5360.0, 7640.0, 6072.0, 2750.0, 12064.0]

# Add your code here
names.append("Priscilla")
insurance_costs.append(8320.0)
medical_records = list(zip(insurance_costs, names))
print(medical_records)
num_medical_records = len(medical_records)
print("There are " + str(num_medical_records) + " medical records.")
first_medical_record = medical_records[0]
print("Here is the first medical record: " + str(first_medical_record))
medical_records.sort()
print("Here are the medical records sorted by insurance cost: " + str(medical_records))
cheapest_three = medical_records[:3]
print("Here are the three cheapest insurance costs in our medical records: " + str(cheapest_three))
priciest_three = medical_records[-3:]
print("Here are the three most expensive insurance costs in our medical records: " + str(priciest_three))
occurrences_paul = names.count("Paul")
print("There are " + str(occurrences_paul) + " individuals with the name Paul in our medical records.")

Project #6: Python Loops: Medical Insurance Project
script.py
names = ["Judith", "Abel", "Tyson", "Martha", "Beverley", "David", "Anabel"]
estimated_insurance_costs = [1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0]
actual_insurance_costs = [1100.0, 2200.0, 3300.0, 4400.0, 5500.0, 6600.0, 7700.0]

# Add your code here
total_cost = 0
for insurance_cost in actual_insurance_costs: total_cost += insurance_cost
average_cost = total_cost/len(actual_insurance_costs)
print("Average insurance cost: " + str(average_cost) + " dollars.")
for i in range(len(names)):
 name = names[i]
insurance_cost = actual_insurance_costs[i]
  print("The insurance cost for " + name + " is " + str(insurance_cost) + " dollars.") 
 # checks if insurance cost is above average
  if insurance_cost > average_cost:
    print("The insurance cost for " + name + " is above average.")

  # checks if insurance cost is below average
  elif insurance_cost < average_cost:
    print("The insurance cost for " + name + " is below average.")

  # checks if insurance cost is equal to the average
  else:
    print("The insurance cost for " + name + " is equal to the average.")
   updated_estimated_costs = [estimated_cost * 11/10 for estimated_cost in estimated_insurance_costs] 
 print(updated_estimated_costs)  

Project #7: Python Strings: Medical Insurance Project
script.py
medical_data = \
"""Marina Allison   ,27   ,   31.1 , 
#7010.0   ;Markus Valdez   ,   30, 
22.4,   #4050.0 ;Connie Ballard ,43 
,   25.3 , #12060.0 ;Darnell Weber   
,   35   , 20.6   , #7500.0;
Sylvie Charles   ,22, 22.1 
,#3022.0   ;   Vinay Padilla,24,   
26.9 ,#4620.0 ;Meredith Santiago, 51   , 
29.3 ,#16330.0;   Andre Mccarty, 
19,22.7 , #2900.0 ; 
Lorena Hodson ,65, 33.1 , #19370.0; 
Isaac Vu ,34, 24.8,   #7045.0"""

# Add your code here
updated_medical_data = medical_data.replace("#", "$")
print(updated_medical_data)
num_records = 0
for character in updated_medical_data:
  if character == "$":
    num_records += 1 
    print("There are " + str(num_records) + " medical records in the data.")
medical_data_split = updated_medical_data.split(";")
print(medical_data_split)
medical_records = []
for record in medical_data_split:
  medical_records.append(record.split(','))
print(medical_records)
medical_records_clean = []
for record in medical_records:
  record_clean = []
  for item in record:
    record_clean.append(item.strip())
    medical_records_clean.append(record_clean)
    print(medical_records_clean)
    for record in medical_records_clean:
      record[0] = record[0].upper()
      print(record[0])
      names = []
      ages = []
      bmis = []
      insurance_costs = []
  names.append(record[0])
  ages.append(record[1])
  bmis.append(record[2])
  insurance_costs.append(record[3])
  print("Names: " + str(names))
print("Ages: " + str(ages))
print("BMI: "  + str(bmis))
print("Insurance Costs: " + str(insurance_costs))
total_bmi = 0
for bmi in bmis:
  total_bmi += float(bmi)
  average_bmi = total_bmi/len(bmis)
print("Average BMI: " + str(average_bmi))

Project #8: Python Dictionaries: Medical Insurance Project
script.py
# Add your code here
medical_costs = {}

medical_costs["Marina"] = 6607.0
medical_costs["Vinay"] = 3325.0
medical_costs.update({"Connie": 8886.0, "Isaac": 16444.0, "Valentina": 6420.0})
print(medical_costs)
total_cost = 0
for cost in medical_costs.values():
  total_cost += cost
  average_cost = total_cost/len(medical_costs)
  print("Average Insurance Cost: " +
  str(average_cost))
  names = ["Marina", "Vinay", "Connie", "Isaac", "Valentina"]
  ages = [27, 24, 43, 35, 52]
  zipped_ages = zip(names, ages)
  names_to_ages = {key: value for key, value in zipped_ages}
  print(names_to_ages)
  marina_age = names_to_ages.get("Marina", None)
  print("Marina's age is " +
  str(marina_age))

  medical_records = {}
  medical_records["Marina"] = {"Age": 27, "Sex": "Female", "BMI": 31.1, "Children": 2, "Smoker": "Non-smoker", "Insurance_cost": 6607.0}
  medical_records["Vinay"] = {"Age": 24, "Sex": "Male", "BMI": 26.9, "Children": 0, "Smoker": "Non-smoker", "Insurance_cost": 3225.0}
medical_records["Connie"] = {"Age": 43, "Sex": "Female", "BMI": 25.3, "Children": 3, "Smoker": "Non-smoker", "Insurance_cost": 8886.0}
medical_records["Isaac"] = {"Age": 35, "Sex": "Male", "BMI": 20.6, "Children": 4, "Smoker": "Smoker", "Insurance_cost": 16444.0}
medical_records["Valentina"] = {"Age": 52, "Sex": "Female", "BMI": 18.7, "Children": 1, "Smoker": "Non-smoker", "Insurance_cost": 6420.0}
print(medical_records)
medical_records["Connie"]
print("Connie's insurance cost is " + str(medical_records["Connie"]["Insurance_cost"]) + " dollars.")
medical_records.pop("Vinay")
for name, record in medical_records.items():
  print(name + " is a " + str(record["Age"]) + \
  " year old " + record["Sex"] + " " + record["Smoker"] \
  + " with a BMI of " + str(record["BMI"]) + \
  " and insurance cost of " + str(record["Insurance_cost"]))

Project #9: Python Classes: Medical Insurance Project
script.py
class Patient:
    def __init__(name, age):
    self.name = name
    self.age = age
    # add more parameters here
    def __init__(self, name, age, sex, bmi,    num_of_children, smoker):
  self.name = name
  self.age = age
  self.sex = sex
  self.bmi = bmi
  self.num_of_children = num_of_children
  self.smoker = smoker

  patient1 = Patient("John Williams", 32, 1, 22.3, 0, 0)
  print(patient1.name)
  def estimated_insurance_cost(self):
  estimated_cost = 250 * self.age - 128 * self.sex + 370 * self.bmi + 425 * self.num_of_children + 24000 * self.smoker - 12500
  print(self.name + "'s estimated insurance cost is " + str(estimated_cost) + " dollars.")
  def update_age(self, new_age):
    self.age = new_age
    print(self.name + " is now " +
    str(self.age) + " years old.")
    self.estimated_insurance_cost()
    def update_num_children(self, new_num_children):
      self.age = new_num_children
      print(self.name + " has " +
      str(self.num_of_children) + "children")
      if self.num_of_children == 1:
  print(self.name + " has " + str(self.num_of_children) + "child.")
else:
  print(self.name + " has " + str(self.num_of_chilrden) + "children.")
  patient1.update_num_children(1)
def patient_profile(self):
  patient_information = {}
  patient_information["Name"] = self.name
  patient_information["Age"] = self.age
  patient_information["Sex"] = self.sex
  patient_information["BMI"] = self.bmi
  patient_information["Number of Children"] = self.num_of_children
  patient_information["Smoker"] = self.smoker
  return patient_information
  print(patient1.patient_profile())

Project #10: Trends in Startups
project.sqlite
SELECT *
FROM startups;

SELECT COUNT(*)
FROM startups;

SELECT SUM(valuation)
FROM startups;

SELECT MAX(raised)
FROM startups;

SELECT MAX(raised)
FROM startups
WHERE stage = 'Seed';

SELECT MIN(founded)
FROM startups;

SELECT AVG(valuation)
FROM startups;

SELECT category, AVG(valuation)
FROM startups
GROUP BY category;

SELECT category, ROUND(AVG(valuation), 2)
FROM startups
GROUP BY category;

SELECT category, ROUND(AVG(valuation), 2)
FROM startups
GROUP BY 1
ORDER BY 2 DESC;

SELECT category, COUNT(*)
FROM startups
GROUP BY category;

SELECT category, COUNT(*)
FROM startups
GROUP BY category
HAVING COUNT(*) > 3
ORDER BY 2 DESC;

SELECT location, AVG(employees)
FROM startups
GROUP BY location;

SELECT location, AVG(employees)
FROM startups
GROUP BY location
HAVING AVG(employees) > 500;
